services:
  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    env_file: ".env"
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_SECURITY_PLUGIN=true" # Disable the security plugin (for development only)
      - plugins.security.ssl.http.enabled=false  # Ensure SSL is disabled
      - plugins.security.ssl.transport.enabled=false  # Disable Transport SSL
      - plugins.security.allow_default_init_securityindex=true # Prevent startup failures
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    expose:
      - "9200" # REST API - Only accessible inside Docker
      - "9600" # Performance Analyzer - Only accessible inside Docker
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
      # Uncomment the next line if OpenSearch needs to query SQL
      - sql_network  

  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    env_file: ".env"
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true" # Disable the security plugin (for development only)
      - plugins.security.ssl.http.enabled=false  # Ensure SSL is disabled
      - plugins.security.ssl.transport.enabled=false  # Disable Transport SSL
      - plugins.security.allow_default_init_securityindex=true # Prevent startup failures
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    expose:
      - "9200" # REST API - Only accessible inside Docker
      - "9600" # Performance Analyzer - Only accessible inside Docker
    networks:
      - opensearch-net
      # Uncomment the next line if OpenSearch needs to query SQL
      - sql_network  

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of OpenSearch installed on other nodes
    container_name: opensearch-dashboards
    expose:
      - "5601" # Expose port 5601 for internal web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - opensearch-net

  ingest:
    build:
      context: ..  # Set build context to the root project directory
      dockerfile: opensearch/Dockerfile  # Specify the Dockerfile inside opensearch/
    container_name: ingest-container
    env_file: ".env"
    networks:
      - opensearch-net
    depends_on:
      opensearch-node1:
        condition: service_healthy
      opensearch-node2:
        condition: service_healthy
    volumes:
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials to the container
    command: ["/bin/sh", "-c", "while true; do sleep 30; done"]  # Keep container running

volumes:
  opensearch-data1:
  opensearch-data2:

networks:
  opensearch-net:
    name: opensearch-net
    driver: bridge
  # Uncomment the next section if OpenSearch needs SQL access
  sql_network:
  #   external: true
